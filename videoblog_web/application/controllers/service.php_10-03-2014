<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
//error_reporting(E_ALL);
	//ini_set('display_errors', 'On');
// include Facebook libraries
require_once('facebookPost.php');
require_once('twitterPost.php');
require_once('ffmpeg.class.php');
class Service extends CI_Controller {
	
	// Error tag flag
	public $errorFlag;
	
	// Success tag glag
	public $successFlag;
	
	// Password lengths
	public $passwordLength = 10;
	
	function __construct()
	{
		parent::__construct();      
		$this->load-> model('post_model', '', TRUE);
		$this->load-> model('post_categories_model', '', TRUE);
		$this->load-> model('category_model', '', TRUE);
		$this->load->model('member_model', '', TRUE);
		$this->load->model('configuration_model', '', TRUE);
		$this->load->model('emailtemplate_model', '', TRUE);
		$this->load->model('country_model', '', TRUE);
		$this->load->model('state_model', '', TRUE);
		$this->load->library('upload'); 
		$this->load->library('image_lib');
		
		// Facebook API class
		$this->facebookpost = new FacebookPost;
		
		// Twitter API class
		$this->twitterPost = new TwitterPost;
		
		$this->errorFlag 	= -1;
		$this->successFlag	=  1;
    }

	function index()
	{
		if($this->input->post()){
			$action = $this->input->post('action');
		}
		if($this->input->get()){
			$action = $this->input->get('action');
		}
		
		switch($action)
		{
		 	case 'userLogin':
	          	$this->userLogin();
	            break;
	            
	        case 'forgotPassword':
		 		$this->forgotPassword();
		 		break;
		 		
		 	case 'userRegistration':
	          	$this->userRegistration();
	            break;
			
	        case 'homePageLatestPost':
	          	$this->homePageLatestPost();
	            break;
	            
	        case 'newsFeed':
	        	$this->newsFeed();
	        	break;
	        	
		 	case 'getCategories':
	          	$this->getCategories();
	            break;

            case 'getPosts':           	
	          	$this->getPosts();
	            break;

	        case 'getPostdetails':           	
	          	$this->getPostdetails();
	            break;

	        case 'getProfileDetails':           	
	          	$this->getProfileDetails();
	            break;
	            
	        case 'setProfileCoverImage':
	        	$this->setProfileCoverImage();
	        	break;
	        	
	        case 'deleteProfileCoverImage':
	        	$this->deleteProfileCoverImage();
	        	break;
	        	
	        case 'getPublicProfile':
	        	$this->getPublicProfile();
	        	break;
	        	
	        case 'setFollow':
	        	$this->setFollow();
	        	break;
	        	
	        case 'setUnFollow':
	        	$this->setUnFollow();
	        	break;
	        	
	        case 'setProfileDetails':
	        	$this->setProfileDetails();
	        	break;
	        	
	        case 'setPost':
	        	$this->setPost();
	        	break;
	        	
	        case 'deletePost':
	        	$this->deletePost();
	        	break;
	        		
	        case 'getComments':
	        	$this->getComments();
	        	break;
	        	
	        case 'setComments':
	        	$this->setComments();
	        	break;
	        
	        case 'deleteComment':
	        	$this->deleteComment();
	        	break;	
	        		
	        case 'setPostLike':
	        	$this->setPostLike();
	        	break;
	        	
	        case 'setPostUnLike':
	        	$this->setPostUnLike();
	        	break;
	        	
	        case 'getCountries':
	        	$this->getCountries();
	        	break;
	        	
	        case 'getState':
	        	$this->getState();
	        	break;
	        	
	        case 'pushNotification':
	        	$this->pushNotification();
	        	break;
	        	
	        case 'loginWithTwitter':
	        	$this->loginWithTwitter();
	        	break;
	        	
	        case 'callBackTwitter':
	        	$this->callBackTwitter();
	        	break;
		}
	}

	//check login from mobile 
	function userLogin()
	{
		/*if(!$this->input->post()){ 
		echo '<html>
			<body>
			<form action="" method="post"
			enctype="multipart/form-data">
			<table border="1" cellpadding="5">
				<input type="hidden" name="eLoginType" value="FACEBOOK" />
				
				<!--<tr>
					<td>Email:</td><td><input type="text" name="vEmail" value="" /></td>
				</tr>
				<tr>
					<td>Password:</td><td><input type="password" name="vPassword" value="" /></td>
				</tr>
				<tr>
					<td>Name:</td><td><input type="text" name="vName" value="" /></td>
				</tr>>-->
				<tr>
					<td>member:</td><td><input type="text" name="iMemberId" value="" /></td>
				</tr>
				<tr>
					<td>tFacebookToken:</td><td><input type="text" name="tFacebookToken" value="" /></td>
				</tr>
				<tr>
					<td>Facebook ID:</td><td><input type="text" name="vFacebookId" value="" /></td>
				</tr>
				<!--<tr>
					<td><label for="file">Picture:</label></td>
					<td><input type="text" name="vPicture" id="file"></td>
				</tr>-->
				<tr>
					<td colspan="2" align="center"><input type="submit" name="submit" value="Submit"></td>
				</tr>
			</table>
			</form> 
			
			</body>
			</html>';exit;
		}*/
		
		$data['vName']      = $this->input->post('vName');
		$data['vUsername']  = $this->input->post('vUsername');
		$data['dCreatedDate'] = date('Y-m-d H:i:s');
		
		$vEmail    = '';
		if($this->input->post('vEmail')){
			$vEmail    = $this->input->post('vEmail');
			$data['vEmail']     = $this->input->post('vEmail');
		}
		
		$vPassword = '';
		if($this->input->post('vPassword')){
			$data['vPassword']  = md5($this->input->post('vPassword'));
			$vPassword = md5($this->input->post('vPassword'));
		}
		
		$loginWithSocialMediaFlag = FALSE;
		
		// Login type condition
		$data['eLoginType'] = 'REGISTER';
		$eLoginType = $this->input->post('eLoginType');
		
		if( $eLoginType == 'FACEBOOK'){
			$data['eLoginType'] = 'FACEBOOK';
			$data['vFacebookId'] = $this->input->post('vFacebookId');
			$data['tFacebookToken'] = $this->input->post('tFacebookToken');
			$loginWithSocialMediaFlag = TRUE;
		}
		
		if($eLoginType == 'TWITTER'){
			$data['eLoginType'] = 'TWITTER';
			$data['vTwitterId'] = $this->input->post('vTwitterId');
			$data['tTwitterToken'] = $this->input->post('tTwitterToken');
			$loginWithSocialMediaFlag = TRUE;
		}
		
		if(($vEmail != '') && ($vPassword != '') && filter_var($vEmail, FILTER_VALIDATE_EMAIL)){
			$loginWithWhichField = 'EMAIL';
			$loginCheck = $this->member_model->check_authentication($vEmail,$vPassword,$data,$loginWithWhichField);
			unset($loginCheck['vPassword']);
			if($loginCheck)
			{
				$data = $loginCheck;
				$message['msg'] = "You are logged in ";
				$message['success'] = $this->successFlag;
			}
			else
			{
				unset($data);// echo $this->input->post('vUsername');exit;
				$data['vEmail']     = $this->input->post('vEmail');
				$message['msg'] = "Sorry , Your Email or Password is wrong!";
				$message['success'] = $this->errorFlag;
			}
		}else if(($vEmail != '') && ($vPassword != '') && !filter_var($vEmail, FILTER_VALIDATE_EMAIL)){
			$loginWithWhichField = 'USERNAME';
			$loginCheck = $this->member_model->check_authentication($vEmail,$vPassword,$data,$loginWithWhichField);
			unset($loginCheck['vPassword']);
			if($loginCheck)
			{
				$data = $loginCheck;
				$message['msg'] = "You are logged in ";
				$message['success'] = $this->successFlag;
			}
			else
			{
				unset($data);// echo $this->input->post('vUsername');exit;
				$data['vUsername']     = $this->input->post('vEmail');
				$message['msg'] = "Sorry , Your Username or Password is wrong!";
				$message['success'] = $this->errorFlag;
			}
		}else if($loginWithSocialMediaFlag == TRUE){
			$loginWithWhichField = 'SOCIAL';
			
			// add member social information
			$iMemberId = $this->input->post('iMemberId');
			if($iMemberId){
				// Update facebook token
				$socialInfo = array();
				if($data['eLoginType'] == 'FACEBOOK'){
					$socialInfo['iMemberId'] 		= $iMemberId;
					$socialInfo['vFacebookId'] 		= $data['vFacebookId'];
					$socialInfo['tFacebookToken'] 	= $data['tFacebookToken'];
					$this->member_model->add_socialmedia_info($socialInfo);
				}
				if($data['eLoginType'] == 'TWITTER'){
					$socialInfo['iMemberId'] 		= $iMemberId;
					$socialInfo['vTwitterId'] 		= $data['vTwitterId'];
					$socialInfo['tTwitterToken'] 	= $data['tTwitterToken'];
					$this->member_model->add_socialmedia_info($socialInfo);
				}
			}
			
			$fieldName = '';
			if($data['eLoginType'] == 'FACEBOOK'){
				$fieldName = 'vFacebookId';
				$socialId = $data['vFacebookId'];
			}
			
			if($data['eLoginType'] == 'TWITTER'){
				$fieldName = 'vTwitterId';
				$socialId  = $data['vTwitterId'];
			}
			
			$checkUnameAndEmail = $this->member_model->check_username_or_email($socialId,$fieldName);
			if($checkUnameAndEmail){
				
				// Update facebook token
				if($data['eLoginType'] == 'FACEBOOK'){
					$takenData['vFacebookId'] = $data['vFacebookId'];
					$takenData['tFacebookToken'] = $data['tFacebookToken'];
					$result = $this->member_model->update_socialmedia_token($takenData);
				}
				
				// update twitter token
				if($data['eLoginType'] == 'TWITTER'){
					$takenData['eLoginType'] = 'TWITTER';
					$takenData['vTwitterId'] = $data['vTwitterId'];
					$takenData['tTwitterToken'] = $data['tTwitterToken'];
					$result = $this->member_model->update_socialmedia_token($takenData);
				}
				
				$memberData = $this->member_model->get_member_details_social_media_id($socialId,$fieldName);
				unset($memberData['vPassword']);
				$message['msg'] = "You are logged in ";
				$message['success'] = $this->successFlag;
				$dataArry = array(
					'data'    => $memberData,
					'message' => $message
				);
				header('Content-type: application/json');
				$main = json_encode($dataArry);
				echo $main.'';
				exit;
			}else{
				$message['msg'] = "you are not registered";
				$message['success'] = $this->errorFlag;
				$dataArry = array(
					'data'    => $data,
					'message' => $message
				);
				header('Content-type: application/json');
				$main = json_encode($dataArry);
				echo $main.'';
				exit;
			}
			
			/*$iMemberId = $this->member_model->add_member($data);
			$data['iMemberId'] = $iMemberId;
			if($iMemberId){
				// File Upload from URL
				$get_url = $this->input->post('vPicture');
				
				if($data['eLoginType'] == 'FACEBOOK'){
						$url = $get_url.'?style=large';
						$ext = 'gif';
					}else{
						$url = $get_url;
						$ext = end(explode(".",strtolower(basename($url))));
					}
				if($url){
				    $file = fopen($url,"rb");
					$dir = $this->config->item('member_picture_path').$data['iMemberId'];
					if(!is_dir($dir)){
						if (!mkdir($dir, 0777, true)) {
						    $message['msg'] = "Failed to create folders...";
				  			$message['success'] = $this->errorFlag;
						}
					}
				    $directory = $dir."/";
					
				    
				    $new_image_name = $data['iMemberId'].'.'.$ext;
				    $fileurl = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
				    $ch = curl_init($url);
					$fp = fopen($fileurl, 'wb');
					curl_setopt($ch, CURLOPT_FILE, $fp);
					curl_setopt($ch, CURLOPT_HEADER, 0);
					curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
					curl_exec($ch);
					curl_close($ch);
					$newfile = fclose($fp);
				    
				    /*$ext = end(explode(".",strtolower(basename($url))));
			        
			        $new_image_name = $data['iMemberId'].'.'.$ext;
			        $newfile = fopen($directory . $new_image_name, "wb");
			        if($newfile){
			            /*while(!feof($file)){
			                fwrite($newfile,fread($file,1024 * 8),1024 * 8);
			            }
			            $fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
						$data['vPicture'] = $fileurl;
						
						// Update Image
						$picData['iMemberId'] 	= $data['iMemberId'];
						$picData['vPicture']	= $new_image_name;
						$this->member_model->update_profile_picture($picData);
						unset($data['vPassword']);
			        }else{
			            $message['msg'] = "File does not exists";
						$message['success'] = $this->errorFlag;
			        }
				    
				}else{
					$message['msg'] = "Please enter the URL";
					$message['success'] = $this->errorFlag;
				}
				
				$message['msg'] = "You are logged in ";
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = "Sorry , Your Username or Password is wrong!";
			  	$message['success'] = $this->errorFlag;
			}*/
			/*$loginCheck = $this->member_model->check_authentication($vEmail,$vPassword,$data,$loginWithWhichField);
			unset($loginCheck['vPassword']);
			if($loginCheck)
			{
				$data = $loginCheck;
				$message['msg'] = "You are logged in ";
				$message['success'] = $this->successFlag;
			}
			else
			{
			  $message['msg'] = "Sorry , Your Username or Password is wrong!";
			  $message['success'] = $this->errorFlag;
			}*/
		}else {
			unset($data);
			$data['vEmail']     = $this->input->post('vEmail');
			$message['msg'] = "Please enter Email ID OR Username";
			$message['success'] = $this->errorFlag;
		}
		$dataArry = array(
			'data' 	  => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main;
		exit;
	}
	
	// Forgotten password
	function forgotPassword(){
		$vEmail 	= $this->input->get('vEmail');
		//$vUsername 	= $this->input->get('vUsername');
		if(!empty($vEmail)){
			$memberData = $this->member_model->find_member_by_email($vEmail);
			if($memberData){
				
				// Set new password;
				$iMemberId = $memberData['iMemberId'];
				$passwordLength = $this->passwordLength;
				$genaratNewPassword = $this->getRandomStringPassword($passwordLength);
				
				$updatePassword = $this->member_model->update_new_password($iMemberId,$genaratNewPassword);
				
				if($updatePassword){
					$memberData['vPassword'] = $genaratNewPassword;
					
					$result = $this->Send($memberData);
					if($result){
						$message['msg'] = "Forgot password mail sent successfully.";
						$message['success'] = $this->successFlag;
					}
					else{
						$message['msg'] = "Error in sending mail.";
						$message['success'] = $this->errorFlag;
					}
				}else{
					$message['msg'] = "Error in sending mail.";
					$message['success'] = $this->errorFlag;
				}
			}else{
				$memberData = array('vEmail' => $vEmail);
				$message['msg'] = "Sorry email ID not match!";
				$message['success'] = $this->errorFlag;
			}
		}else{
			$memberData = array('vEmail' => $vEmail);
			$message['msg'] = "Enter your email ID!";
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data'    => $memberData,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main;
		exit;
	}
	
	// Gererate new password
	function getRandomStringPassword($length) {
		$salt = array_merge(range('a', 'z'), range(0, 9));
		$maxIndex = count($salt) - 1;
		
		$result = '';
		for ($i = 0; $i < $length; $i++) {
			$index = mt_rand(0, $maxIndex);
			$result .= $salt[$index];
		}
		return $result;
	}
	
	//user registration 
	function userRegistration()
	{
		/*if(!$this->input->post()){
			
		echo '<html>
			<body>
			<form action="" method="post"
			enctype="multipart/form-data">
			<table border="1" cellpadding="5">
				<input type="hidden" name="eLoginType" value="TWITTER" />
				<tr>
					<td>Facebook ID:</td><td><input type="text" name="vTwitterId" value="" /></td>
				</tr>
				<tr>
					<td>Facebook secret ID:</td><td><input type="text" name="tTwitterToken" value="" /></td>
				</tr>
				
				<tr>
					<td>vDevicename</td><td><input type="text" name="vDevicename" value="" /></td>
				</tr>
				<tr>
					<td>vType</td><td><input type="text" name="vType" value="" /></td>
				</tr>
				<tr>
					<td>vDeviceid</td><td><input type="text" name="vDeviceid" value="" /></td>
				</tr>
				<tr>
					<td>deviceToken:</td><td><input type="text" name="tDeviceToken" value="" /></td>
				</tr>
				
				
				<!--<tr>
					<td>Email:</td><td><input type="text" name="vEmail" value="" /></td>
				</tr>
				<tr>
					<td>Password:</td><td><input type="password" name="vPassword" value="" /></td>
				</tr>-->
				<tr>
					<td>Name:</td><td><input type="text" name="vName" value="" /></td>
				</tr>
				<tr>
					<td>Username:</td><td><input type="text" name="vUsername" value="" /></td>
				</tr>
				<!--<tr>
					<td><label for="file">Picture:</label></td>
					<td><input type="file" name="vPicture" id="file"></td>
				</tr>
				<tr>
					<td><label for="file">Cover Image:</label></td>
					<td><input type="file" name="vCoverImage" id="file"></td>
				</tr>-->
				<tr>
					<td colspan="2" align="center"><input type="submit" name="submit" value="Submit"></td>
				</tr>
			</table>
			</form>
			
			</body>
			</html>';exit;
		}*/
		/*if($this->input->post()){
			echo '<pre>';print_r($this->input->post());exit;
		}*/
		$data['vEmail']     = $this->input->post('vEmail');
		if($this->input->post('vPassword')){
			$data['vPassword']  = md5($this->input->post('vPassword'));
		}
		$data['vName']      = $this->input->post('vName');
		$data['vUsername']  = $this->input->post('vUsername');
		/*$data['iCountryId']  = $this->input->post('iCountryId');
		$data['iStateId']  = $this->input->post('iStateId');
		$data['vCity']  = $this->input->post('vCity');*/
		$data['dCreatedDate'] = date('Y-m-d H:i:s');
		
		// store Device data
		$data['vDeviceid']     = $this->input->post('vDeviceid');
		$data['tDeviceToken']  = $this->input->post('tDeviceToken');
		
		$loginWithSocialMediaFlag = FALSE;
		
		// Registration type condition
		$data['eLoginType'] = 'REGISTER';
		$eLoginType = $this->input->post('eLoginType');
		
		if( $eLoginType == 'FACEBOOK'){
			$data['eLoginType'] = 'FACEBOOK';
			$data['vFacebookId'] = $this->input->post('vFacebookId');
			$data['tFacebookToken'] = $this->input->post('tFacebookToken');
			$loginWithSocialMediaFlag = TRUE;
		}
		
		if($eLoginType == 'TWITTER'){
			$data['eLoginType'] = 'TWITTER';
			$data['vTwitterId'] = $this->input->post('vTwitterId');
			$data['tTwitterToken'] = $this->input->post('tTwitterToken');
			$loginWithSocialMediaFlag = TRUE;
		}
		
		// Username Restriction ( One or more user cannot use same username )
		if(!empty($data['vUsername']) && $loginWithSocialMediaFlag == FALSE){			
			$fieldName = 'vUsername';
			$checkUnameAndEmail = $this->member_model->check_username_or_email($data['vUsername'],$fieldName);
			if($checkUnameAndEmail){
				unset($data['vPassword']);
				$message['msg']="Username already taken.";
				$message['success']= $this->errorFlag;
				$dataArry = array(
					'data'    => $data,
					'message' => $message
				);
				header('Content-type: application/json');
				$main = json_encode($dataArry);
				echo $main.'';
				exit;
			}
		}else if(empty($data['vUsername'])){
			unset($data['vPassword']);
			$message['msg']="Please enter username.";
			$message['success']= $this->errorFlag;
			$dataArry = array(
				'data'    => $data,
				'message' => $message
			);
			header('Content-type: application/json');
			$main = json_encode($dataArry);
			echo $main.'';
			exit;
		}
		
		if (!filter_var($data['vEmail'], FILTER_VALIDATE_EMAIL) && $loginWithSocialMediaFlag == FALSE){
			unset($data['vPassword']);
			$message['msg']="Invalid email address";
			$message['success']= $this->errorFlag;
			$dataArry = array(
				'data'    => $data,
				'message' => $message
			);
			header('Content-type: application/json');
			$main = json_encode($dataArry);
			echo $main.'';
			exit;
		}
		
		// Email Restriction ( One or more user cannot use same email )
		if(!empty($data['vEmail'])){
			$fieldName = 'vEmail';
			$checkUnameAndEmail = $this->member_model->check_username_or_email($data['vEmail'],$fieldName);
			if($checkUnameAndEmail){
				unset($data['vPassword']);
				$message['msg']="Email already taken.";
				$message['success']= $this->errorFlag;
				$dataArry = array(
					'data'    => $data,
					'message' => $message
				);
				header('Content-type: application/json');
				$main = json_encode($dataArry);
				echo $main.'';
				exit;
			}
		}else if(empty($data['vEmail']) && $loginWithSocialMediaFlag == FALSE){
			unset($data['vPassword']);
			$message['msg']="Please enter email.";
			$message['success']= $this->errorFlag;
			$dataArry = array(
					'data'    => $data,
					'message' => $message
				);
			header('Content-type: application/json');
			$main = json_encode($dataArry);
			echo $main.'';
			exit;
		}
		
		$fieldName = '';
		if($data['eLoginType'] == 'FACEBOOK'){
			$fieldName = 'vFacebookId';
			$socialId = $data['vFacebookId'];
		}
		
		if($data['eLoginType'] == 'TWITTER'){
			$fieldName = 'vTwitterId';
			$socialId  = $data['vTwitterId'];
		}
		
		$checkUnameAndEmail = '';
		if($fieldName != ''){
			$checkUnameAndEmail = $this->member_model->check_username_or_email($socialId,$fieldName);
		}
		if($checkUnameAndEmail){
			$memberData = $this->member_model->get_member_details_social_media_id($socialId,$fieldName);
			unset($memberData['vPassword']);
			$message['msg'] = "Social media ID already taken";
			$message['success'] = $this->errorFlag;
			$dataArry = array(
				'data'    => $memberData,
				'message' => $message
			);
			header('Content-type: application/json');
			$main = json_encode($dataArry);
			echo $main.'';
			exit;
		}
		//echo '<pre>';print_r($data);exit;
		$iMemberId = $this->member_model->add_member($data);
		$data['iMemberId'] = $iMemberId;
		
		// Member profile picture
		if(!empty($_FILES['vPicture']['name']) && !empty($iMemberId)){
			$data['iMemberId'] = $iMemberId;
			$dir = $this->config->item('member_picture_path').$data['iMemberId'];
			if(!is_dir($dir)){
				if (!mkdir($dir, 0777, true)) {
				    $message['msg']="Failed to create folders...";
					$message['success']= $this->errorFlag;
				}
			}
			$fileType = strtolower(substr($_FILES['vPicture']['name'], strrpos($_FILES['vPicture']['name'], '.') + 1));
			//$fileType = explode('/',$_FILES['vPicture']['type']);
			$filename = $_FILES['vPicture']['tmp_name'];
			$new_image_name = $data['iMemberId'].'.'.$fileType;
			$fullfilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
			move_uploaded_file($_FILES["vPicture"]["tmp_name"], $fullfilename);
			
			// Image rotation
			$fromIos = $this->input->post('vType');
			if($fromIos == 'IOS'){
				// File and rotation
				$rotateFilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
				$degrees = $this->input->post('imagerotation');
				// Content type
				if($fileType == 'png' || $fileType == 'PNG'){
					header('Content-type: image/png');
					$source = imagecreatefromjpeg($rotateFilename);
					$bgColor = imagecolorallocatealpha($source, 255, 255, 255, 127);
					// Rotate 
					$rotate = imagerotate($source, $degrees, $bgColor);
					imagesavealpha($rotate, true);
					imagepng($rotate,$rotateFilename);
				
				}
				if($fileType == 'jpg' || $fileType == 'jpeg'){
					header('Content-type: image/jpeg');
					$source = imagecreatefromjpeg($rotateFilename);
					// Rotate 
					$rotate = imagerotate($source, $degrees, 0);
					imagejpeg($rotate,$rotateFilename);

				}
				
				// Free the memory
				imagedestroy($source);
				imagedestroy($rotate);
			}
			$fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
			$data['vPicture'] = $fileurl;
			
			// Update Image
			$picData['iMemberId'] 	= $data['iMemberId'];
			$picData['vPicture']	= $new_image_name;
			$this->member_model->update_profile_picture($picData);
			
			unset($data['vPassword']);
		}
		
		// Cover Image
		/*if(!empty($_FILES['vCoverImage']['name']) && !empty($iMemberId)){
			$dir = $this->config->item('member_picture_path').$data['iMemberId'];
			if(!is_dir($dir)){
				if (!mkdir($dir, 0777, true)) {
				    $message['msg']="Failed to create folders...";
					$message['success']= $this->errorFlag;
				}
			}
			$fileType = strtolower(substr($_FILES['vCoverImage']['name'], strrpos($_FILES['vCoverImage']['name'], '.') + 1));
			//$fileType = explode('/',$_FILES['vPicture']['type']);
			$filename = $_FILES['vCoverImage']['tmp_name'];
			$new_image_name = $data['iMemberId'].'_cover_image.'.$fileType;
			$fullfilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
			move_uploaded_file($_FILES["vCoverImage"]["tmp_name"], $fullfilename);
			
			$fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
			$data['vCoverImage'] = $fileurl;
			
			// Update Image
			$picData['iMemberId'] 	= $data['iMemberId'];
			$picData['vCoverImage']	= $new_image_name;
			$this->member_model->update_profile_picture($picData);
			
			unset($data['vPassword']);
		}*/
		
		// File upload from URL
		$vPictureUrl = $this->input->post('vPicture');
		if(!empty($vPictureUrl) && empty($_FILES['vPicture']['name']) && !empty($iMemberId)){
			// File Upload from URL
			$get_url = $this->input->post('vPicture');
			
			if($data['eLoginType'] == 'FACEBOOK'){
					$url = $get_url.'?style=large';
					$ext = 'gif';
				}else{
					$url = $get_url;
					$ext = end(explode(".",strtolower(basename($url))));
				}
			if($url){
			    $file = fopen($url,"rb");
				$dir = $this->config->item('member_picture_path').$data['iMemberId'];
				if(!is_dir($dir)){
					if (!mkdir($dir, 0777, true)) {
					    $message['msg'] = "Failed to create folders...";
			  			$message['success'] = $this->errorFlag;
					}
				}
			    $directory = $dir."/";
				
			    
			    $new_image_name = $data['iMemberId'].'.'.$ext;
			    $fileurl = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
			    $ch = curl_init($url);
				$fp = fopen($fileurl, 'wb');
				curl_setopt($ch, CURLOPT_FILE, $fp);
				curl_setopt($ch, CURLOPT_HEADER, 0);
				curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
				curl_exec($ch);
				curl_close($ch);
				$newfile = fclose($fp);
			    
			    /*$ext = end(explode(".",strtolower(basename($url))));
		        
		        $new_image_name = $data['iMemberId'].'.'.$ext;
		        $newfile = fopen($directory . $new_image_name, "wb");*/
		        if($newfile){
		            /*while(!feof($file)){
		                fwrite($newfile,fread($file,1024 * 8),1024 * 8);
		            }*/
		            $fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
					$data['vPicture'] = $fileurl;
					
					// Update Image
					$picData['iMemberId'] 	= $data['iMemberId'];
					$picData['vPicture']	= $new_image_name;
					$this->member_model->update_profile_picture($picData);
					unset($data['vPassword']);
		        }else{
		            $message['msg'] = "File does not exists";
					$message['success'] = $this->errorFlag;
		        }
			    
			}else{
				$message['msg'] = "Please enter the URL";
				$message['success'] = $this->errorFlag;
			}
			
			$message['msg'] = "You are logged in ";
			$message['success'] = $this->successFlag;
				/*$get_url = $vPictureUrl;
				$url = trim($get_url);
				if($url){
					$file = fopen($url,"rb");
				    $dir = $this->config->item('member_picture_path').$data['iMemberId'];
					if(!is_dir($dir)){
						if (!mkdir($dir, 0777, true)) {
						    $message['msg'] = "Failed to create folders...";
				  			$message['success'] = $this->errorFlag;
						}
					}
				    $directory = $dir."/";
				    $ext = end(explode(".",strtolower(basename($url))));
			        
			        $new_image_name = $data['iMemberId'].'.'.$ext;
			        $newfile = fopen($directory . $new_image_name, "wb");
			        if($newfile){
			            while(!feof($file)){
			                fwrite($newfile,fread($file,1024 * 8),1024 * 8);
			            }
			            $fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
						$data['vPicture'] = $fileurl;
						
						// Update Image
						$picData['iMemberId'] 	= $data['iMemberId'];
						$picData['vPicture']	= $new_image_name;
						$this->member_model->update_profile_picture($picData);
						unset($data['vPassword']);
			        }else{
			            $message['msg'] = "File does not exists";
						$message['success'] = $this->errorFlag;
			        }
				    
				}else{
					$message['msg'] = "Error: Please enter the URL";
					$message['success'] = $this->errorFlag;
				}
				
				$message['msg'] = "You are logged in ";
				$message['success'] = $this->successFlag;*/
		}else{
			$message['msg'] = "Sorry , Your Username or Password is wrong!";
		  	$message['success'] = $this->errorFlag;
		}
		
		if(!empty($iMemberId)){
			$message['msg']="Register succesfully";
			$message['success'] = $this->successFlag;
			
			// Push Notification Data
			$pushNotificationData['action'] = 'register';
			$pushNotificationData['vDevicename'] = $this->input->post('vDevicename');
			$pushNotificationData['vType'] = $this->input->post('vType');
			$pushNotificationData['vDeviceid'] = $this->input->post('vDeviceid');
			$pushNotificationData['deviceToken'] = $this->input->post('tDeviceToken');
			
			$this->pushNotification($pushNotificationData);
		}else{
			$message['msg']="Try later on to registration";
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data'    => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main.'';
		exit;
	}
	
	// Homepage latest post
	function homePageLatestPost(){
		
		$conditions = array();
		if($this->input->get('vLattitude')){
			$conditions['vLattitude'] = $this->input->get('vLattitude');
		}
		if($this->input->get('vLongitude')){
			$conditions['vLongitude'] = $this->input->get('vLongitude');
		}
		
		$iSessMemberId 	= $this->input->get('iMemberId');
		$totalPost = $this->post_model->count_post();
		$pageLimit = $this->getConfiguration('FRONT_REC_LIMIT');
		$limit = $pageLimit['vValue'];
		$totalPage = ceil($totalPost/$limit);
		if($this->input->get('page')){
			$pagerId = $this->input->get('page');
			$start = ($pagerId -1) * $limit;
		}else{
			$start = 0;
		}
		
		$latestPost = $this->post_model->get_latest_post($limit,$start,$conditions);
		
		if(!empty($latestPost)){
			foreach ($latestPost as $key => $value){
				$iMemberId = $value['iMemberId'];
				
				$latestPost[$key]['dCreatedDate'] = $this->relativeDate(strtotime($value['dCreatedDate']));
				
				// Memmber picture
				$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
				if(!empty($value['vPicture'])){
					$filename = $this->config->item('member_picture_path').$value['iMemberId']."/".$value['vPicture'];
					
					if (file_exists($filename)) {
						$filename = $this->config->item('member_picture_url').$value['iMemberId']."/".$value['vPicture'];
						$latestPost[$key]['vPicture'] = $filename;
					}else{
						$latestPost[$key]['vPicture'] = $vPictureNotAvailable;
					}
				}else{
					$latestPost[$key]['vPicture'] = $vPictureNotAvailable;
				}
				
				// Post categories
				$iPostId = $value['iPostId'];
				$categories = $this->post_categories_model->get_postcategories_details($iPostId);
				$catArr = array();
				foreach ($categories as $key1 => $value1){
					$categoriesName = $this->category_model->get_category_details($value1['iCategoryId']);
					$catArr[] = $categoriesName['vCategory'];
				}
				$catStr = implode(',',$catArr);
				$latestPost[$key]['vCategoriesName'] = $catStr;
				
				// Count total Post Like
				$latestPost[$key]['totalPostLikes'] = $this->post_model->count_total_post_likes($iPostId);
				
				// Count total Post Comment
				$latestPost[$key]['totalPostComments'] = $this->post_model->count_total_post_comments($iPostId);
				
				// Check post like by current logedin member OR not
				$latestPost[$key]['isPostLike'] = 'NO';
				$iPostLikeStatus = $this->post_model->post_like_status($iPostId,$iSessMemberId);
				if($iPostLikeStatus){
					$latestPost[$key]['isPostLike'] = 'YES';
				}
				
				// post image or post video
				if($latestPost[$key]['eFileType'] == 'Video'){
					//$latestPost[$key]['vVideothumbnail'] =  $this->config->item('post_file_url').$value['iPostId']."/".$value['vVideothumbnail'];
					// Temporary solutions
					$latestPost[$key]['vVideothumbnail'] = $this->config->item('post_file_url').'video-thumbnail.png';
				}else{
					$latestPost[$key]['vVideothumbnail'] = $this->config->item('post_file_url').$value['iPostId']."/".$value['vFile'];
				}
				
				$latestPost[$key]['vFile'] = $this->config->item('post_file_url').$value['iPostId']."/".$value['vFile'];
			}
			
			$message['msg'] = 'Home latest post';
			$message['success'] = $this->successFlag;
			
		}else{
			$latestPost = array('iMemberId' => $iSessMemberId);
			$message['msg'] = 'Post not available';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data'    => $latestPost,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main;
		exit;
	}
	
	/**
	 * Function: Newsfeed for member profile
	 * In the newsfeed: show likes, comments and posts by followers
	 * @param $iProfilerId (Profiler ID)
	 */
	function newsFeed($iMemberId,$isMergeNewsFeed){
		
		$eNewsFeedType = '';
		if(!empty($iMemberId) && $isMergeNewsFeed == true){
			$iMemberId = $iMemberId;
			$eNewsFeedType = 'ME';
		}
		
		if($this->input->get('iProfilerId')){
			$iMemberId   	= $this->input->get('iProfilerId');
			
			// Condition for Notification (Me and Following)
			if($this->input->get('eNewsFeedType')){
				$eNewsFeedType  = $this->input->get('eNewsFeedType');
			}
		}
		
		if(!empty($iMemberId)){
			
			// Get followers Ids
			if($eNewsFeedType == 'ME'){
				$getFollowersId['result'][0]['iFollowerId'] = $iMemberId;
				$getFollowersId['fieldName'] = 'iFollowerId';
			}else{
				$getFollowersId = $this->member_model->get_followers_id($iMemberId,$eNewsFeedType);
			}
			
			if(!empty($getFollowersId)){
				$followersArr = array();
				foreach ($getFollowersId['result'] as $key => $value){
					$followersArr[] = $value[$getFollowersId['fieldName']];
				}
				$data['followersId'] = implode(',',array_unique($followersArr));
				
				// Pagination
				$totalNewsFeed = $this->post_model->count_followers_newsfeed($data['followersId']);
				$pageLimit = $this->getConfiguration('FRONT_REC_LIMIT');
				$limit = $pageLimit['vValue'];
				$totalPage = ceil($totalNewsFeed/$limit);
				
				if($this->input->get('page')){
					$pagerId = $this->input->get('page');
					$start = ($pagerId -1) * $limit;
				}else{
					$start = 0;
				}
				
				$newsFeedData = $this->post_model->get_followers_newsfeed($data['followersId'],$limit,$start);
				
				if(!empty($newsFeedData)){
					
					// Set date in time ago formate and post Image
					foreach ($newsFeedData as $key => $value){
						$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
						$memberImage = $this->member_model->get_member_details($value['iMemberId']);
						if(!empty($memberImage['vPicture'])){
							$filename = $this->config->item('member_picture_path').$memberImage['iMemberId']."/".$memberImage['vPicture'];
							
							if (file_exists($filename)) {
								$filename = $this->config->item('member_picture_url').$memberImage['iMemberId']."/".$memberImage['vPicture'];
								$newsFeedData[$key]['vPicture'] = $filename;
							}else{
								$newsFeedData[$key]['vPicture'] = $vPictureNotAvailable;
							}
						}else{
							$newsFeedData[$key]['vPicture'] = $vPictureNotAvailable;
						}
						
						// post image or post video
						if($newsFeedData[$key]['eFileType'] == 'Video'){
							// Temporary solutions
							$newsFeedData[$key]['vVideothumbnail'] = $this->config->item('post_file_url').'video-thumbnail.png';
							//$newsFeedData[$key]['vVideothumbnail'] =  $this->config->item('post_file_url').$value['iPostId']."/".$value['vVideothumbnail'];
						}else{
							$newsFeedData[$key]['vVideothumbnail'] = $this->config->item('post_file_url').$value['iPostId']."/".$value['vFile'];
						}
						
						$vPictureNotAvailable = $this->config->item('post_file_url')."picture_not_available.jpeg";
						// Post image
						if(!empty($value['vFile'])){
							$filename = $this->config->item('post_file_path').$value['iPostId']."/".$value['vFile'];
							
							if (file_exists($filename)) {
								$filename = $this->config->item('post_file_url').$value['iPostId']."/".$value['vFile'];
								$newsFeedData[$key]['vFile'] = $filename;
							}else{
								$newsFeedData[$key]['vFile'] = $vPictureNotAvailable;
							}
						}else{
							$newsFeedData[$key]['vFile'] = $vPictureNotAvailable;
						}
						
						$newsFeedData[$key]['dCreatedDate'] = $this->relativeDate(strtotime($value['dCreatedDate']));
					}
					$message['msg'] = 'Newsfeed';
					$message['success'] = $this->successFlag;
				}else{
					$newsFeedData = array('iProfilerId' => $iMemberId);
					$message['msg'] = 'No newsfeed available';
					$message['success'] = $this->errorFlag;
				}
				
			}else{
				$newsFeedData = array('iProfilerId' => $iMemberId);
				$message['msg'] = 'No newsfeed available';
				$message['success'] = $this->errorFlag;
			}
		}else{
			$newsFeedData = array('iProfilerId' => $iMemberId);
			$message['msg'] = 'Please try later.';
			$message['success'] = $this->errorFlag;
		}
		
		if($isMergeNewsFeed){
			header('Content-type: application/json');
			$dataArry = array(
				'data' 	  => $newsFeedData,
				'message' => $message
			);
			$main = json_encode($dataArry);
			return $main;
		}else{
			header('Content-type: application/json');
			$dataArry = array(
				'data' 	  => $newsFeedData,
				'message' => $message
			);
			$main = json_encode($dataArry);
			echo $main;
			exit;
		}
	}
	
	//get all categories 
	function getCategories()
	{
		$all_categories = $this->category_model->get_all_categories();
		if($all_categories){
			for ($i=0; $i<count($all_categories); $i++)
			{
				$all_categories[$i]['vImage'] = $this->config->item('category_icon_url').$all_categories[$i]['iCategoryId']."/".$all_categories[$i]['vIcon'];
			}
			
			$message['success'] = $this->successFlag;
			$message['msg'] = 'Categories';
			
		}else{
			$message['msg'] = 'There are no categories';
			$message['success'] = $this->errorFlag;
		}
		
		$data = array(
			'data' => $all_categories,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($data);
		echo $main;
		exit;  
	}
	
	//set Post
	function setPost()
	{
		if(!$this->input->post() || !$_FILES){
		echo '<html>
		<head></head>
			<body>
			<form action="" method="post"
			enctype="multipart/form-data">
			<table border="1" cellpadding="5">
				<tr>
					<td>Current Login Member ID:</td><td><input type="text" name="iMemberId" value="" /></td>
				</tr><!--<tr>
		 			<td>Username:</td><td><input type="text" name="vUsername" value="" /></td>
		 		</tr><tr>
		 			<td>Name:</td><td><input type="text" name="vName" value="" /></td>
		 		</tr>--!>
				<tr>
					<td>Post Headline:</td><td><input type="text" name="tPost" value="" /></td>
				</tr>
				<tr valign="top">
					<td>Categories:</td><td><textarea name="vCategoryId"></textarea></td>
				</tr>
				<tr valign="top">
					<td>Comment:</td><td><textarea name="tComments"></textarea></td>
				</tr>
				<tr>
					<td>File Type:</td><td><select name="eFileType"><option value="Image">Image</option><option value="Video">Video</option></select></td>
				</tr>
				<tr>
					<td>vType:</td><td><input type="text" name="vType" value="" /></td>
				</tr>
				<tr>
					<td>degrees:</td><td><input type="text" name="imagerotation" value="" /></td>
				</tr>
				<tr>
					<td>Longitude:</td><td><input type="text" name="vLongitude" value="" /></td>
				</tr>
				<tr>
					<td><label for="file">Upload:</label></td>
					<td><input type="file" name="vFile" id="file"></td>
				</tr>
				<tr>
					<td colspan="2" align="center"><input type="submit" name="submit" value="Submit"><a style="cursor: pointer;" onclick="myNavFunc();">Take me there!</a></td>
				</tr>
			</table>
			</form>
			
			</body>
			</html>';exit;
		}
		
		if($this->input->post()){
			$iMemberId = $this->input->post('iMemberId');
			$memberData = $this->member_model->get_member_details($iMemberId);
			
			$data['iMemberId'] 		= $iMemberId;
			$data['tPost'] 			= $this->input->post('tPost');
			$data['iCountryId'] 	= $this->input->post('iCountryId');
			$data['iStateId'] 		= $this->input->post('iStateId');
			$data['vCity'] 			= $this->input->post('vCity');
			$data['eFileType'] 		= $this->input->post('eFileType');
			
			$isShareWithFacebook 	= $this->input->post('isShareWithFacebook');
			$isShareWithTwitter 	= $this->input->post('isShareWithTwitter');
			
			$data['tDescription'] 	= $this->input->post('tComments');
			$data['dCreatedDate'] 	= date('Y-m-d H:i:s');
			$data['vLattitude'] 	= $this->input->post('vLattitude');
			$data['vLongitude'] 	= $this->input->post('vLongitude');
			
			$postDataId = $this->post_model->add_post($data);
			
			// Post file
			$new_image_name = '';
			if(!empty($_FILES['vFile']['name'])){
				$dir = $this->config->item('post_file_path').$postDataId;
				if(!is_dir($dir)){
					if (!mkdir($dir, 0777, true)) {
					    $message['msg'] = 'Failed to create folders...';
						$message['success'] = $this->errorFlag;
					}
				}
				
				$filename = $_FILES['vFile']['tmp_name'];
				$fileType = strtolower(substr($_FILES['vFile']['name'], strrpos($_FILES['vFile']['name'], '.') + 1));
				$new_image_name = basename($filename).'.'.$fileType;
				
				$fullfilename = $this->config->item('post_file_path').$postDataId.'/'.$new_image_name;
				move_uploaded_file($filename, $fullfilename);
				
				// Image rotation
				$fromIos = $this->input->post('vType');
				if($fromIos == 'IOS'){
					// File and rotation
					$rotateFilename = $this->config->item('post_file_path').$postDataId.'/'.$new_image_name;
					$degrees = $this->input->post('imagerotation');
				
					// Content type
					if($fileType == 'png' || $fileType == 'PNG'){
						//header('Content-type: image/png');
						$source = imagecreatefromjpeg($rotateFilename);
						$bgColor = imagecolorallocatealpha($source, 255, 255, 255, 127);
						
						// Rotate 
						$rotate = imagerotate($source, $degrees, $bgColor);
						imagesavealpha($rotate, true);
						imagepng($rotate,$rotateFilename);
					}
					
					if($fileType == 'jpg' || $fileType == 'jpeg'){
						//header('Content-type: image/jpeg');
						$source = imagecreatefromjpeg($rotateFilename);
						// Rotate 
						$rotate = imagerotate($source, $degrees, 0);
						imagejpeg($rotate,$rotateFilename);
					}
					
					// Free the memory
					imagedestroy($source);
					imagedestroy($rotate);
				}
				
				$data['vFile'] 			= $new_image_name;
				$picData['iPostId'] 	= $postDataId;
				$picData['vFile']		= $new_image_name;
				$this->post_model->update_post_file($picData);
			}
			
			// Facebook API call for post
			if($postDataId){
				if($data['eFileType'] == 'Video'){
					$fileFullPath = $this->config->item('post_file_url').$postDataId.'/'.$new_image_name;
					$dir = $this->config->item('post_file_path').$postDataId;
					
					// Temporary solutions
					$data['vVideothumbnail'] = $this->config->item('post_file_url').'video-thumbnail.png';
					$newVideoThumbnailName = 'NULL';
					
					/*$newVideoThumbnailName = $this->generatVideoThumbnail($_FILES,$postDataId);
					// update table post for video thumbnail
					if($newVideoThumbnailName){
						$data['vVideothumbnail'] = $this->config->item('post_file_url').$postDataId.'/'.$newVideoThumbnailName;
						//$data['vVideothumbnail'] = $newVideoThumbnailName;
						$picData['iPostId'] 	= $postDataId;
						$picData['vVideothumbnail']		= $newVideoThumbnailName;
						$this->post_model->update_post_file($picData);
					}*/
					
				}else{
					$fileFullPath = $this->config->item('post_file_url').$postDataId.'/'.$new_image_name;
				}
				
				$memberData = $this->member_model->get_all_info_of_member($iMemberId);
				if($isShareWithFacebook == 'FACEBOOK'){
					$postDataArr = array(
						'member' => array(
							'vFacebookId' => $memberData['vFacebookId'],
							'tFacebookToken' => $memberData['tFacebookToken']
						),
						'post' => array(
							'tPost' => $data['tPost'],
							'tDescription' => $data['tDescription'],
							#'picture' => $postPicture,
							'fileFullPath' => $fileFullPath,
							'eFileType' => $data['eFileType']
						)
					);
					$result = $this->facebookpost->setMemberPost($postDataArr);
				}
				
				if($isShareWithTwitter == 'TWITTER'){
					$postDataArr = array(
						'member' => array(
							'vTwitterId' => $memberData['vTwitterId'],
							'tTwitterToken' => $memberData['tTwitterToken']
						),
						'post' => array(
							'tPost' => $data['tPost'],
							'tDescription' => $data['tDescription'],
							#'picture' => $postPicture,
							'fileFullPath' => $fileFullPath,
							'eFileType' => $data['eFileType']
						)
					);
					$result = $this->twitterPost->setMemberPost($postDataArr);
				}
			}
			
			// Insert multiple category to post_categories_model
			$postCategories = $this->input->post('vCategoryId');
			if(!empty($postCategories)){
				$categories = explode(',',$postCategories);
				$catIdArr = array();
				foreach ($categories as $key => $value){
					$catIdArr['iPostId'] 	 = $postDataId;
					$catIdArr['iCategoryId'] = $value;
					$this->post_categories_model->add_post_category($catIdArr);
				}
			}
			
			// Push Notification Data
			if($postDataId){
				
				$followingsIds = $this->member_model->get_profiler_following($iMemberId);
				$followingsIdsArr = array();
				foreach ($followingsIds as $key => $value){
					$followingsIdsArr[] = $value['iFollowerId'];
				}
				
				$memberDeviceInfo = array();
				if(!empty($followingsIdsArr)){
					$followingsIdsStr = implode(',',$followingsIdsArr);
					$memberDeviceInfo = $this->member_model->get_member_device_info($followingsIdsStr);	
				}
				
				$pos = strpos($data['tPost'], 200);
				$memberPostStr = mb_substr($data['tPost'],0, (($pos)?$pos:200),'UTF-8');
				$memberPostStr = $memberPostStr.'...';
				$pushNotificationData = array();
				foreach ($memberDeviceInfo as $key => $value){
					
					$pushNotificationData['action'] = 'sendNotification';
					$pushNotificationData['vDeviceid'] = $value['vDeviceid'];
					$pushNotificationData['msg'] = $memberData['vUsername'].' added post '.$memberPostStr;
					
					$this->pushNotification($pushNotificationData);
				}
				
			}
			
			if($postDataId){ 
				$data['postId'] = $postDataId;
				
				$getUserName = $this->member_model->get_member_details($iMemberId);
				// Add post into newsfeed
				$newsfeedData['iPostId'] 		= $postDataId;
				$newsfeedData['iMemberId']		= $iMemberId;
				$newsfeedData['vUsername'] 		= $getUserName['vUsername'];
				$newsfeedData['tPost'] 			= $data['tPost'];
				$newsfeedData['tDescription']	= $data['tDescription'];
				$newsfeedData['tComments']		= '';
				$newsfeedData['dCreatedDate']	= $data['dCreatedDate'];
				$newsfeedData['vFile']			= $new_image_name;
				$newsfeedData['eFileType']			= $data['eFileType'];
				
				// If post video, store generated new videothumbnail
				if($data['eFileType'] == 'Video'){
					$newsfeedData['vVideothumbnail'] = $newVideoThumbnailName;
				}
				$newsfeedData['eFeedType']		= 'POST';
				
				$this->post_model->add_newsfeed($newsfeedData);
				$data['vFile'] = $this->config->item('post_file_url').$postDataId.'/'.$new_image_name;
				
				$message['msg'] = 'You have successfully added post.';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'Please try later.';
				$message['success'] = $this->errorFlag;
			}
			
		}else{
			$iMemberId = $this->input->post('iMemberId');
			$data = array('iMemberId' => $iMemberId);
			$message['success'] = $this->errorFlag;
			$message['msg'] = 'Please try later.';
		}
		//echo '<pre>';print_r($data);exit;
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
		
	}
	
	// generat video thumbnail
	function generatVideoThumbnail($file, $iPostId){
		
		if(!empty($file['vFile']['name'])){
			$filename = $file['vFile']['tmp_name'];
			$fileType = strtolower(substr($file['vFile']['name'], strrpos($file['vFile']['name'], '.') + 1));
			$fileBaseName = basename($filename);
			$new_image_name = basename($filename).'.'.$fileType;
					
			$fileFullPath = $this->config->item('post_file_path').$iPostId.'/'.$new_image_name;
			$dir = $this->config->item('post_file_path').$iPostId;
			
			$videoThumbnailName = $fileBaseName.'.jpg';
			$ffmpeg = '/usr/local/src/ffmpeg-0.6'; //put the relative path to the ffmpeg.exe file
			$second = 15; //specify the time to get the screen shot at (can easily be randomly generated)
			$image = $dir.'/'.$videoThumbnailName; //define the output file
			$video = $fileFullPath;
			
			//finally assemble the command and execute it
			$result = ('ffmpeg  -i '.$video.' -f mjpeg -vframes 1 -s 150x150 -an '.$image.'');
			exec($result);
			
			return $videoThumbnailName;
		}
	}
	
	//get post listing depends on category
	function getPosts()
	{
		$conditions = array();
		if($this->input->get('vLattitude')){
			$conditions['vLattitude'] = $this->input->get('vLattitude');
		}
		if($this->input->get('vLongitude')){
			$conditions['vLongitude'] = $this->input->get('vLongitude');
		}
		
		$totalPost = $this->post_model->count_post();
		$pageLimit = $this->getConfiguration('FRONT_REC_LIMIT');
		$limit = $pageLimit['vValue'];
		if($this->input->get('page')){
			$pagerId = $this->input->get('page');
			$start = ($pagerId -1) * $limit;
		}else{
			$start = 0;
		}
		
		$iCategoryId = $this->input->get('iCategoryId');
		$post = $this->post_model->get_all_posts($iCategoryId,$limit,$start,$conditions);
		
		/*$iCategoryId = $this->input->get('iCategoryId');
		$post = $this->post_model->get_all_posts($iCategoryId);*/
		if($post){
			for ($i=0; $i<count($post); $i++)
			{
				$iMemberId = $post[$i]['iMemberId'];
				$memberDetails = $this->member_model->get_member_details($iMemberId);
				$post[$i]['vName'] 		= $memberDetails['vName'];
				$post[$i]['vUsername'] 	= $memberDetails['vUsername'];
				// Memmber picture
				$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
				if(!empty($memberDetails['vPicture'])){
					$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
					
					if (file_exists($filename)) {
						$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
						$post[$i]['vPicture'] = $filename;
					}else{
						$post[$i]['vPicture'] = $vPictureNotAvailable;
					}
				}else{
					$post[$i]['vPicture'] = $vPictureNotAvailable;
				}
				
				// Post categories
				$iPostId = $post[$i]['iPostId'];
				$categories = $this->post_categories_model->get_postcategories_details($iPostId);
				$catArr = array();
				foreach ($categories as $key => $value){
					$categoriesName = $this->category_model->get_category_details($value['iCategoryId']);
					$catArr[] = $categoriesName['vCategory'];
				}
				$catStr = implode(',',$catArr);
				$post[$i]['vCategoriesName'] = $catStr;
				
				// Count total Post Like
				$post[$i]['totalPostLikes'] = $this->post_model->count_total_post_likes($iPostId);
				
				// Count total Post Comment
				$post[$i]['totalPostComments'] = $this->post_model->count_total_post_comments($iPostId);
				
				// post image or post video
				if($post[$i]['eFileType'] == 'Video'){
					//$post[$i]['vVideothumbnail'] =  $this->config->item('post_file_url').$post[$i]['iPostId']."/".$post[$i]['vVideothumbnail'];
					// Temporary solutions
					$post[$i]['vVideothumbnail'] = $this->config->item('post_file_url').'video-thumbnail.png';
				}else{
					$post[$i]['vVideothumbnail'] = $this->config->item('post_file_url').$post[$i]['iPostId']."/".$post[$i]['vFile'];
				}
				
				$post[$i]['vFile'] = $this->config->item('post_file_url').$post[$i]['iPostId']."/".$post[$i]['vFile'];
			}
			
			$message['msg'] = 'Post Data';
			$message['success'] = $this->successFlag;
		}else{
			$post['iCategoryId'] = $iCategoryId;
			$message['msg'] = 'Post not available';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $post,
			'message' => $message
		);
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main.'';
		exit;
	}

	//get post details for post detail page 
	function getPostdetails()
	{
		$iPostId = $this->input->get('iPostId');
		$iSessMemberId 	= $this->input->get('iMemberId');
		$post_details = $this->post_model->get_all_postdetails($iPostId);
		
		if($post_details){
			$iMemberId = $post_details['iMemberId'];
			$memberDetails = $this->member_model->get_member_details($iMemberId);
			$post_details['vName'] 		= $memberDetails['vName'];
			$post_details['vUsername'] 	= $memberDetails['vUsername'];
			// Memmber picture
			$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
			if(!empty($memberDetails['vPicture'])){
				$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
				
				if (file_exists($filename)) {
					$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
					$post_details['vPicture'] = $filename;
				}else{
					$post_details['vPicture'] = $vPictureNotAvailable;
				}
			}else{
				$post_details['vPicture'] = $vPictureNotAvailable;
			}
			
			// Post categories
			$iPostId = $post_details['iPostId'];
			$categories = $this->post_categories_model->get_postcategories_details($iPostId);
			$catArr = array();
			foreach ($categories as $key => $value){
				$categoriesName = $this->category_model->get_category_details($value['iCategoryId']);
				$catArr[] = $categoriesName['vCategory'];
			}
			$catStr = implode(',',$catArr);
			$post_details['vCategoriesName'] = $catStr;
			
			// Count total Post Like
			$post_details['totalPostLikes'] = $this->post_model->count_total_post_likes($iPostId);
			
			// Count total Post Comment
			$post_details['totalPostComments'] = $this->post_model->count_total_post_comments($iPostId);
			
			// Check post like by current logedin member OR not
			$post_details['isPostLike'] = 'NO';
			$iPostLikeStatus = $this->post_model->post_like_status($iPostId,$iSessMemberId);
			if($iPostLikeStatus){
				$post_details['isPostLike'] = 'YES';
			}
			
			// post image or post video
			if($post_details['eFileType'] == 'Video'){
				// Temporary solutions
				$post_details['vVideothumbnail'] = $this->config->item('post_file_url').'video-thumbnail.png';
				//$post_details['vVideothumbnail'] =  $this->config->item('post_file_url').$post_details['iPostId']."/".$post_details['vVideothumbnail'];
			}else{
				$post_details['vVideothumbnail'] =  $this->config->item('post_file_url').$post_details['iPostId']."/".$post_details['vFile'];
			}
			
			$post_details['vFile'] = $this->config->item('post_file_url').$post_details['iPostId']."/".$post_details['vFile'];	
			
			$message['msg'] = 'Post Details';
			$message['success']= $this->successFlag;	
		}else{
			$post_details['iPostId'] = $iPostId;
			$message['msg'] = 'No post not available';
			$message['success']= $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $post_details,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main.'';
		exit;
	}
	
	// delete POST by post ID
	function deletePost(){
		$iPostId 		= $this->input->get('iPostId');
		//$iSessMemberId 	= $this->input->get('iSessMemberId');
		
		$data['iPostId'] = $iPostId;
		
		if(!empty($iPostId)){
			
			$deletePostResult = $this->post_model->delete_post_by_postid($iPostId);
			if($deletePostResult){
				
				// Define flag for all post delete
				$allPost = 'ALL';
				
				// Delete newsfeed data depends on relative post
				$fieldName = 'iPostId';
				$this->post_model->delete_newsfeed($iPostId,'',$fieldName,$allPost);
				
				// Trigger post comments delete depends on post delete
				$this->post_model->delete_comment('','',$iPostId);
				
				// Trigger post like delete depends on post delete
				$this->post_model->unlike_post($iPostId,'',$allPost);
				
				$message['msg'] = 'Successfully deleted your post';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'No post available';
				$message['success'] = $this->errorFlag;
			}
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo $main.'';
		exit;
	}
	
	
	//get member profile details to show existing details
	function getProfileDetails()
	{
		$iMemberId = $this->input->post('iMemberId');
		$iSessMemberId = $iMemberId;
		$memberDetails = array('iMemberId' => $iMemberId);
		if(!empty($iMemberId)){
			$memberDetails = $this->member_model->edit_member_details($iMemberId);
			
			if(!empty($memberDetails)){
				// Memmber picture
				$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
				if(!empty($memberDetails['vPicture'])){
					$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
					
					if (file_exists($filename)) {
						$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
						$memberDetails['vPicture'] = $filename;
					}else{
						$memberDetails['vPicture'] = $vPictureNotAvailable;
					}
				}else{
					$memberDetails['vPicture'] = $vPictureNotAvailable;
				}
				
				// Cover Image
				$vCoverPictureNotAvailable  = $this->config->item('member_picture_url')."cover_picture_not_available.jpeg";
				if(!empty($memberDetails['vCoverImage'])){
					$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vCoverImage'];
					
					if (file_exists($filename)) {
						$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vCoverImage'];
						$memberDetails['vCoverImage'] = $filename;
					}else{
						$memberDetails['vCoverImage'] = $vCoverPictureNotAvailable;
					}
				}else{
					$memberDetails['vCoverImage'] = $vCoverPictureNotAvailable;
				}
				
				// Check current login member and profiler member IF YES set flag YES for provide Edit Link
				// Else check following for followers
				$memberDetails['isCurrentUserLoginMatch'] = 'NO';
				$memberDetails['isFollowing'] = 'NO';
				if($iSessMemberId == $iMemberId){
					$memberDetails['isCurrentUserLoginMatch'] = 'YES';
				}else{
					$isFollowing = $this->member_model->get_profiler_following($iMemberId);
					if(in_array($iSessMemberId,$isFollowing)){
						$memberDetails['isFollowing'] = 'YES';
					}else{
						$memberDetails['isFollowing'] = 'NO';
					}
				}
				
				$memberDetails['totalFollowers']=$memberDetails['totalFollowings']=$memberDetails['totalPostByProfiler']=0;
				
				// Get followers
				$getFollowers = $this->member_model->get_followers($iMemberId);
				$memberDetails['totalFollowers'] = $getFollowers;
				
				// Get following
				$getFollowing = $this->member_model->get_following($iMemberId);
				$memberDetails['totalFollowings'] = $getFollowing;
				
				// Count all post by profiler
				$countTotalPostByProfiler = $this->post_model->count_post_by_profiler_id($iMemberId);
				$memberDetails['totalPostByProfiler'] = $countTotalPostByProfiler;
				
				// Merge Newsfeeds
				$isMergeNewsFeed = TRUE;
				$memberDetails['newsFeeds'] = $this->newsFeed($memberDetails['iMemberId'],$isMergeNewsFeed);
				
				$message['msg'] = 'Member Detail';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'Please try later';
				$message['success'] = $this->errorFlag;
			}
		}else{
			$message['msg'] = 'Please try later';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $memberDetails,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}

	//set member profile details to show existing details
	function setProfileDetails()
	{
		$data['iMemberId'] = $this->input->post('iMemberId');
		$data['vName'] = $this->input->post('vName');
		$data['vUsername'] = $this->input->post('vUsername');
		$data['vEmail'] = $this->input->post('vEmail');
		$data['vURL'] = $this->input->post('vURL');
		$data['vPhone'] = $this->input->post('vPhone');
		$data['tDescription'] = $this->input->post('tDescription');
		if($this->input->post('vPassword')){
			$data['vPassword'] = md5($this->input->post('vPassword'));
		}
		
		// Update profile with social media type
		/*$data['eLoginType'] = 'REGISTER';
		$eLoginType = $this->input->post('eLoginType');
		
		if( $eLoginType == 'FACEBOOK'){
			$data['eLoginType'] = 'FACEBOOK';
			$data['vFacebookId'] = $this->input->post('vFacebookId');
			$data['tFacebookToken'] = $this->input->post('tFacebookToken');
			$loginWithSocialMediaFlag = TRUE;
		}
		
		if($eLoginType == 'TWITTER'){
			$data['eLoginType'] = 'TWITTER';
			$data['vTwitterId'] = $this->input->post('vTwitterId');
			$data['tTwitterToken'] = $this->input->post('tTwitterToken');
			$loginWithSocialMediaFlag = TRUE;
		}*/
		
		// Upload profile picture
		if(!empty($_FILES['vPicture']['name'])){
			$dir = $this->config->item('member_picture_path').$data['iMemberId'];
			if(!is_dir($dir)){
				if (!mkdir($dir, 0777, true)) {
				    $message['msg']="Failed to create folders...";
					$message['success']  = $this->errorFlag;
				}
			}
			
			$fileType = strtolower(substr($_FILES['vPicture']['name'], strrpos($_FILES['vPicture']['name'], '.') + 1));
			$filename = $_FILES['vPicture']['tmp_name'];
			$new_image_name = $data['iMemberId'].'.'.$fileType;
			
			$fullfilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
			move_uploaded_file($_FILES["vPicture"]["tmp_name"], $fullfilename);
			
			// Image rotation
			$fromIos = $this->input->post('vType');
			if($fromIos == 'IOS'){
				// File and rotation
				$rotateFilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
				$degrees = $this->input->post('imagerotation');
				// Content type
				if($fileType == 'png' || $fileType == 'PNG'){
					header('Content-type: image/png');
					$source = imagecreatefromjpeg($rotateFilename);
					$bgColor = imagecolorallocatealpha($source, 255, 255, 255, 127);
					// Rotate 
					$rotate = imagerotate($source, $degrees, $bgColor);
					imagesavealpha($rotate, true);
					imagepng($rotate,$rotateFilename);
				
				}
				if($fileType == 'jpg' || $fileType == 'jpeg'){
					header('Content-type: image/jpeg');
					$source = imagecreatefromjpeg($rotateFilename);
					//echo "<pre>";print_r($source);exit;
					// Rotate 
					$rotate = imagerotate($source, $degrees, 0);
					imagejpeg($rotate,$rotateFilename);

				}
				
				// Free the memory
				imagedestroy($source);
				imagedestroy($rotate);
			}
			
			$data['vPicture'] = $new_image_name;
		}
		
		// Cover Image
		if(!empty($_FILES['vCoverImage']['name'])){
			$dir = $this->config->item('member_picture_path').$data['iMemberId'];
			if(!is_dir($dir)){
				if (!mkdir($dir, 0777, true)) {
				    $message['msg']="Failed to create folders...";
					$message['success']= $this->errorFlag;
				}
			}
			$fileType = strtolower(substr($_FILES['vCoverImage']['name'], strrpos($_FILES['vCoverImage']['name'], '.') + 1));
			$filename = $_FILES['vCoverImage']['tmp_name'];
			$new_image_name = $data['iMemberId'].'_cover_image.'.$fileType;
			$fullfilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
			move_uploaded_file($_FILES["vCoverImage"]["tmp_name"], $fullfilename);
			
			$fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
			$data['vCoverImage'] = $new_image_name;
		}
		
		$iMemberId = $this->member_model->edit_member($data);
		
		$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
		$vCoverPictureNotAvailable  = $this->config->item('member_picture_url')."cover_picture_not_available.jpeg";
		if($iMemberId){
			if(!empty($iMemberId['vPicture'])){
				$filename = $this->config->item('member_picture_path').$iMemberId['iMemberId']."/".$iMemberId['vPicture'];
			
				if (file_exists($filename)) {
					$filename = $this->config->item('member_picture_url').$iMemberId['iMemberId']."/".$iMemberId['vPicture'];
					$data['vPicture'] = $filename;
				}else{
					$data['vPicture'] = $vPictureNotAvailable;
				}
			}else{
				$data['vPicture'] = $vPictureNotAvailable;
			}
			
			if(!empty($iMemberId['vCoverImage'])){
				$filename = $this->config->item('member_picture_path').$iMemberId['iMemberId']."/".$iMemberId['vCoverImage'];
			
				if (file_exists($filename)) {
					$filename = $this->config->item('member_picture_url').$iMemberId['iMemberId']."/".$iMemberId['vCoverImage'];
					$data['vCoverImage'] = $filename;
				}else{
					$data['vCoverImage'] = $vCoverPictureNotAvailable;
				}
			}else{
				$data['vCoverImage'] = $vCoverPictureNotAvailable;
			}
			
			$message['msg']="Profile updated successfully.";
			$message['success'] = $this->successFlag;
		}else{
			$message['msg']="Try later on to update profile";
			$message['success']  = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// set Profile Image
	function setProfileCoverImage(){
		$data['iMemberId'] = $this->input->post('iMemberId');
		// Cover Image
		if(!empty($_FILES['vCoverImage']['name'])){
			$dir = $this->config->item('member_picture_path').$data['iMemberId'];
			if(!is_dir($dir)){
				if (!mkdir($dir, 0777, true)) {
				    $message['msg']="Failed to create folders...";
					$message['success']= $this->errorFlag;
				}
			}
			$fileType = strtolower(substr($_FILES['vCoverImage']['name'], strrpos($_FILES['vCoverImage']['name'], '.') + 1));
			$filename = $_FILES['vCoverImage']['tmp_name'];
			$new_image_name = $data['iMemberId'].'_cover_image.'.$fileType;
			$fullfilename = $this->config->item('member_picture_path').$data['iMemberId'].'/'.$new_image_name;
			
			if(move_uploaded_file($_FILES["vCoverImage"]["tmp_name"], $fullfilename)){
			
				$fileurl = $this->config->item('member_picture_url').$data['iMemberId'].'/'.$new_image_name;
				$data['vCoverImage'] = $fileurl;
				
				// Update Image
				$picData['iMemberId'] 	= $data['iMemberId'];
				$picData['vCoverImage']	= $new_image_name;
				$result = $this->member_model->update_profile_picture($picData);
				
				if($result){
					$message['msg']="Cover image updated successfully";
					$message['success']  = $this->successFlag;
				}else{
					$message['msg']="Cover image could not update, Try later";
					$message['success']  = $this->errorFlag;
				}
			
			}else{
				$message['msg']="Cover image could not update, Try later";
				$message['success']  = $this->errorFlag;
			}
			
		}else{
			$message['msg']="Cover image could not update, Try later";
			$message['success']  = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// unlink Member cover image
	function deleteProfileCoverImage(){
		$data['iMemberId'] = $this->input->post('iMemberId');
		
		if($data['iMemberId']){
			$iMemberId = $data['iMemberId'];
			$memberDetails = $this->member_model->edit_member_details($iMemberId);
			$coverImage = $memberDetails['vCoverImage'];
			$fullfilename = $this->config->item('member_picture_path').$iMemberId.'/'.$coverImage;
			
			if(file_exists($fullfilename)) {
				unlink($fullfilename);
				// Update Image
				$picData['iMemberId'] 	= $data['iMemberId'];
				$picData['vCoverImage']	= 'NULL';
				$result = $this->member_model->update_profile_picture($picData);
				
				$message['msg']="Successfully deleted your cover image";
				$message['success']  = $this->successFlag;
			}else{
				$message['msg']="Cover image could not be deleted, Try later";
				$message['success']  = $this->errorFlag;
			}
			//echo '<pre>';print_r($fullfilename);exit;
		}else{
			$message['msg']="Cover image could not be deleted, Try later";
			$message['success']  = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
		
	}
	
	//get user public profile 
	function getPublicProfile()
	{
		$iSessMemberId   = $this->input->post('iSessMemberId');
		$iMemberId = $this->input->post('iProfilerId');
		$memberDetails = array('iSessMemberId' => $iSessMemberId,'iProfilerId' => $iMemberId);
		
		if(!empty($iSessMemberId) && !empty($iMemberId)){
		
			$memberDetails = $this->member_model->get_member_details($iMemberId);
			
			if(!empty($memberDetails)){
				// Memmber picture
				$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
				if(!empty($memberDetails['vPicture'])){
					$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
					
					if (file_exists($filename)) {
						$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
						$memberDetails['vPicture'] = $filename;
					}else{
						$memberDetails['vPicture'] = $vPictureNotAvailable;
					}
				}else{
					$memberDetails['vPicture'] = $vPictureNotAvailable;
				}
				
				// Cover Image
				$vCoverPictureNotAvailable  = $this->config->item('member_picture_url')."cover_picture_not_available.jpeg";
				if(!empty($memberDetails['vCoverImage'])){
					$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vCoverImage'];
					
					if (file_exists($filename)) {
						$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vCoverImage'];
						$memberDetails['vCoverImage'] = $filename;
					}else{
						$memberDetails['vCoverImage'] = $vCoverPictureNotAvailable;
					}
				}else{
					$memberDetails['vCoverImage'] = $vCoverPictureNotAvailable;
				}
				
				// Check current login member and profiler member IF YES set flag YES for provide Edit Link
				// Else check following for followers
				$memberDetails['isCurrentUserLoginMatch'] = 'NO';
				$memberDetails['isFollowing'] = 'NO';
				if($iSessMemberId == $iMemberId){
					$memberDetails['isCurrentUserLoginMatch'] = 'YES';
				}else{
					$isFollowing = $this->member_model->get_profiler_following($iMemberId);
					$followArry = array();
					foreach ($isFollowing as $followKey => $followValue){
						$followArry[] = $followValue['iFollowerId'];
					}
					
					if(in_array($iSessMemberId,$followArry)){
						$memberDetails['isFollowing'] = 'YES';
					}else{
						$memberDetails['isFollowing'] = 'NO';
					}
				}
				
				$memberDetails['totalFollowers']=$memberDetails['totalFollowings']=$memberDetails['totalPostByProfiler']=0;
				// Get followers
				$getFollowers = $this->member_model->get_followers($iMemberId);
				$memberDetails['totalFollowers'] = $getFollowers;
				
				// Get following
				$getFollowing = $this->member_model->get_following($iMemberId);
				$memberDetails['totalFollowings'] = $getFollowing;
				
				// Count all post by profiler
				$countTotalPostByProfiler = $this->post_model->count_post_by_profiler_id($iMemberId);
				$memberDetails['totalPostByProfiler'] = $countTotalPostByProfiler;
				
				// Merge Newsfeeds
				$isMergeNewsFeed = TRUE;
				//echo $memberDetails['iMemberId'];exit;
				$memberDetails['newsFeeds'] = $this->newsFeed($memberDetails['iMemberId'],$isMergeNewsFeed);
				
				$message['msg'] = 'Public Data';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'Please try later';
				$message['success'] = $this->errorFlag;
			}
		}else {
			$message['msg'] = 'Please try later';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $memberDetails,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	//follow user
	function setFollow()
	{
		$data = array();
		$iSessMemberId   = $this->input->post('iSessMemberId');
		$iMemberId = $this->input->post('iProfilerId');
		
		$data = array('iFollowerId' => $iSessMemberId, 'iMemberId' => $iMemberId);
		if(!empty($iSessMemberId) && !empty($iMemberId)){
			$followId = $this->member_model->add_follow($data);
			
			if( $followId ){
				$message['msg'] = 'You have successfully following';
				$message['success'] = $this->successFlag;
				
				$followingMemberID = $this->member_model->get_member_details($iSessMemberId);
				$followersMemberID = $this->member_model->get_member_details($iMemberId);
				
				// Push Notification Data
				if(!empty($followingMemberID) && !empty($followersMemberID)){
					
					$pos = strpos($getPostData['tPost'], 200);
					$memberPostStr = mb_substr($getPostData['tPost'],0, (($pos)?$pos:200),'UTF-8');
					$memberPostStr = $memberPostStr.'...';
					
					$memberDeviceInfo = $this->member_model->get_member_device_info($followersMemberID['iMemberId']);
					
					if($followingMemberID['iMemberId'] != $followersMemberID['iMemberId']){
						$pushNotificationData['action'] = 'sendNotification';
						$pushNotificationData['vDeviceid'] = $memberDeviceInfo[0]['vDeviceid'];
						$pushNotificationData['msg'] = $followingMemberID['vUsername'].' follow you';
						$this->pushNotification($pushNotificationData);
					}
				}
				
			}else{
				$message['msg'] = 'Please try later';
				$message['success'] =$this->errorFlag;
			}
		}else {
			$message['msg'] = 'Please try later';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// Unfollow	
	function setUnFollow(){
		$iSessMemberId  = $this->input->post('iSessMemberId');
		$iProfilerId 	= $this->input->post('iProfilerId');
		
		$data = array('iSessMemberId'=>$iSessMemberId,'iProfilerId'=>$iProfilerId);
		if(!empty($iSessMemberId) && !empty($iProfilerId)){
			
			$unFollowResult = $this->member_model->set_unfollow($iSessMemberId,$iProfilerId);
			if($unFollowResult){
				$message['success'] = $this->successFlag;
				$message['msg'] = 'Successfully unfollow';
			}else{
				$message['sucess'] = $this->errorFlag;
				$message['msg'] = 'Please try later.';
			}
		}else{
			$message['sucess'] = $this->errorFlag;
			$message['msg'] = 'Please try later.';
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	
	// set Post comments
	function setComments(){
		
		if($this->input->post()){
			$iMemberId	= $this->input->post('iMemberId');
			$iPostId	= $this->input->post('iPostId');
			$tComments	= $this->input->post('tComments');
			
			$data['iMemberId'] 		= $iMemberId;
			$data['iPostId'] 		= $iPostId;
			$data['tDescription'] 	= $tComments;
			$data['dCreatedDate'] 	= date('Y-m-d H:i:s');
			
			$iPostCommentId = $this->post_model->add_post_comments($data);
			if($iPostCommentId){
				$getUserName = $this->member_model->get_member_details($iMemberId);
				$getPostData = $this->post_model->get_post_details($iPostId);
				if(!empty($getUserName) && !empty($getPostData)){
					// Add post into newsfeed
					$newsfeedData['iPostId'] 		= $iPostId;
					$newsfeedData['iCommentId'] 	= $iPostCommentId;
					$newsfeedData['iMemberId']		= $iMemberId;
					$newsfeedData['vUsername'] 		= $getUserName['vUsername'];
					$newsfeedData['tPost'] 			= $getPostData['tPost'];
					$newsfeedData['tDescription']	= $getPostData['tDescription'];
					$newsfeedData['tComments']		= $data['tDescription'];
					$newsfeedData['dCreatedDate']	= $data['dCreatedDate'];
					$newsfeedData['vFile']			= $getPostData['vFile'];
					$newsfeedData['eFeedType']		= 'COMMENT';
					
					$this->post_model->add_newsfeed($newsfeedData);
				}
				
				// Push Notification Data
				if(!empty($getUserName) && !empty($getPostData)){
					
					$pos = strpos($getPostData['tPost'], 200);
					$memberPostStr = mb_substr($getPostData['tPost'],0, (($pos)?$pos:200),'UTF-8');
					$memberPostStr = $memberPostStr.'...';
					//$pushNotificationData = array();
					//foreach ($memberDeviceInfo as $key => $value){
					$memberDeviceInfo = $this->member_model->get_member_device_info($getPostData['iMemberId']);
					
					if($getUserName['iMemberId'] != $getPostData['iMemberId']){
						$pushNotificationData['action'] = 'sendNotification';
						$pushNotificationData['vDeviceid'] = $memberDeviceInfo[0]['vDeviceid'];
						$pushNotificationData['msg'] = $getUserName['vUsername'].' comments on your post: '.$memberPostStr;
						$this->pushNotification($pushNotificationData);
					}
				}
				
				$message['msg'] = 'Successfully added your comment.';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'Please try later.';
				$message['sucess'] = $this->errorFlag;
			}
		}else{
			$iMemberId	= $this->input->post('iMemberId');
			$iPostId	= $this->input->post('iPostId');
			$data = array('iMemberId'=>$iMemberId,'iPostId'=>$iPostId);
			$message['msg'] = 'Please try later.';
			$message['sucess'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	
	// get comments
	function getComments(){
		
		$postId = $this->input->post('iPostId');
		if(!empty($postId)){
			$postCommentsDetail = $this->post_model->get_comment_details($postId);
			
			if(!empty($postCommentsDetail)){
				foreach ($postCommentsDetail as $key => $value){
					// Member Data
					$memberDetails = $this->member_model->get_member_details($value['iMemberId']);
					
					// Push member data to array
					$data[$key]['iMemberId'] 	= $value['iMemberId'];
					$data[$key]['iPostId'] 		= $value['iPostId'];
					$data[$key]['iCommentId'] 	= $postCommentsDetail[$key]['iCommentId'];
					$data[$key]['vUsername'] 	= $memberDetails['vUsername'];
					$data[$key]['vName'] 		= $memberDetails['vName'];
					$data[$key]['tPost'] 		= $postCommentsDetail[$key]['tPost'];
					$data[$key]['tComments'] 	= $postCommentsDetail[$key]['tDescription'];
					$data[$key]['dCreatedDate'] = $this->relativeDate(strtotime($postCommentsDetail[$key]['dCreatedDate']));
					
					// Memmber picture
					$vPictureNotAvailable = $this->config->item('member_picture_url')."picture_not_available.jpeg";
					if(!empty($memberDetails['vPicture'])){
						$filename = $this->config->item('member_picture_path').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
						
						if (file_exists($filename)) {
							$filename = $this->config->item('member_picture_url').$memberDetails['iMemberId']."/".$memberDetails['vPicture'];
							$data[$key]['vPicture'] = $filename;
						}else{
							$data[$key]['vPicture'] = $vPictureNotAvailable;
						}
					}else{
						$data[$key]['vPicture'] = $vPictureNotAvailable;
					}
				}
				
				$message['msg'] = 'Post Comment';
				$message['success'] = $this->successFlag;
			}else{
				$data['iPostId'] = $postId;
				$message['msg'] = 'No post comment available';
				$message['success']= $this->errorFlag;
			}
		}else{
			$data['iPostId'] = $postId;
			$message['msg'] = 'No post comment available';
			$message['success']= $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// Delete Comment
	function deleteComment(){
		
		$iCommentId = $this->input->post('iCommentId');
		$iMemberId 	= $this->input->post('iMemberId');
		$iPostId 	= $this->input->post('iPostId');
		$data = array('iCommentId' => $iCommentId,'iMemberId' => $iMemberId,'iPostId' => $iPostId);
		if(!empty($iCommentId)){
			$deleteMyPostComment = false;
			if(!empty($iPostId)){
				$deleteMyPostComment = true;
			}
			$deletedCommentResult = $this->post_model->delete_comment($iCommentId,$iMemberId,$iPostId,$deleteMyPostComment);
			if($deletedCommentResult){
				
				// On unlike post delete newsfeed depends on post delete comment
				$fieldName = 'iCommentId';
				$myPostCommentFeed = 'ALL';
				$this->post_model->delete_newsfeed($iCommentId,$iMemberId,$fieldName,$myPostCommentFeed);
				
				$message['msg'] = 'Successfully deleted your comment';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'No post comment available';
				$message['success'] = $this->errorFlag;
			}
			
		}else{
			$message['msg'] = 'No post comment available';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	
	// Set post like
	function setPostLike(){
		
		if($this->input->post()){
			$data['iPostId'] 	= $this->input->post('iPostId');
			$data['iMemberId'] 	= $this->input->post('iMemberId');
			
			$iPostId 	= $data['iPostId'];
			$iMemberId 	= $data['iMemberId'];
			
			$iPostLikeId = $this->post_model->add_post_like($data);
			if($iPostLikeId){
				$getUserName = $this->member_model->get_member_details($iMemberId);
				$getPostData = $this->post_model->get_post_details($iPostId);
				
				if(!empty($getUserName) && !empty($getPostData)){
					// Add post into newsfeed
					$newsfeedData['iPostId'] 		= $iPostId;
					$newsfeedData['iLikeId'] 		= $iPostLikeId;
					$newsfeedData['iMemberId']		= $iMemberId;
					$newsfeedData['vUsername'] 		= $getUserName['vUsername'];
					$newsfeedData['tPost'] 			= $getPostData['tPost'];
					$newsfeedData['tDescription']	= $getPostData['tDescription'];
					$newsfeedData['tComments']		= '';
					$newsfeedData['dCreatedDate']	= date('Y-m-d H:i:s');
					$newsfeedData['vFile']			= $getPostData['vFile'];
					$newsfeedData['eFeedType']		= 'LIKE';
					
					$this->post_model->add_newsfeed($newsfeedData);
				}
				
				// Push Notification Data
				if(!empty($getUserName) && !empty($getPostData)){
					
					$pos = strpos($getPostData['tPost'], 200);
					$memberPostStr = mb_substr($getPostData['tPost'],0, (($pos)?$pos:200),'UTF-8');
					$memberPostStr = $memberPostStr.'...';
					
					$memberDeviceInfo = $this->member_model->get_member_device_info($getPostData['iMemberId']);
					
					if($getUserName['iMemberId'] != $getPostData['iMemberId']){
						$pushNotificationData['action'] = 'sendNotification';
						$pushNotificationData['vDeviceid'] = $memberDeviceInfo[0]['vDeviceid'];
						$pushNotificationData['msg'] = $getUserName['vUsername'].' likes your post: '.$memberPostStr;
						$this->pushNotification($pushNotificationData);
					}
				}
				
				$message['msg'] = 'You have successfully like post.';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'Please try later.';
				$message['success'] = $this->errorFlag;
			}
		}else{
			$data['iPostId'] 	= $this->input->post('iPostId');
			$data['iMemberId'] 	= $this->input->post('iMemberId');
			$message['msg'] = 'Please try later.';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// Set post unlike
	function setPostUnLike(){
		
		if($this->input->post()){
			$iPostId 		= $this->input->post('iPostId');
			$iSessMemberId 	= $this->input->post('iMemberId');
			
			$data = array('iPostId' => $iPostId);
			$iPostUnLikeId = $this->post_model->unlike_post($iPostId,$iSessMemberId);
			if($iPostUnLikeId){
				
				// On unlike post delete newsfeed depends on post unlike
				$fieldName = "iPostId";
				$this->post_model->delete_newsfeed($iPostId,$iSessMemberId,$fieldName);
				
				$message['msg'] = 'You have successfully unlike post.';
				$message['success'] = $this->successFlag;
			}else{
				$message['msg'] = 'Please try later.';
				$message['success'] = $this->errorFlag;
			}
		}else{
			$data = array('iPostId' =>$this->input->post('iPostId'),'iMemberId'=>$this->input->post('iMemberId'));
			$message['msg'] = 'Please try later.';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	
	// get all country list
	function getCountries(){
		$fromService = 1;
		$allCountryData = $this->country_model->get_all_country();
		
		if($allCountryData){
			$data = $allCountryData;
			$message['msg'] = 'All country list';
			$message['success'] = $this->successFlag;
		}else{
			$data['iCountryId'] = 0;
			$message['msg'] = 'Please try later.';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// get all country list
	function getState(){
		$allStateData = $this->state_model->get_all_state();
		
		if($allStateData){
			$data = $allStateData;
			$message['msg'] = 'All state list';
			$message['success'] = $this->successFlag;
		}else{
			$data['iStateId'] = 0;
			$message['msg'] = 'Please try later.';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// authentication login with twitter
	function loginWithTwitter(){
		$result = $this->twitterPost->authLogInWithTwitter();
	}
	
	// call back function return twitter data of member
	function callBackTwitter(){
		$result = $this->twitterPost->authLogInWithTwitter($sess = true);
		if($result){
			$data['vUsername'] = $result['twitterData']['screen_name'];
			$data['vTwitterId'] = $result['twitterData']['oauth_token'];
			$data['tTwitterToken'] = $result['twitterData']['oauth_token_secret'];
			$message['msg'] = $result['message'];
			$message['success'] = $this->successFlag;
		}else{
			$data['login'] = 'Failed';
			$message['msg'] = 'Please try later.';
			$message['success'] = $this->errorFlag;
		}
		
		$dataArry = array(
			'data' => $data,
			'message' => $message
		);
		
		header('Content-type: application/json');
		$main = json_encode($dataArry);
		echo  $main.'';
		exit;
	}
	
	// generat thumbnail for Image
	function generatImageThumbnail(){
		
	}
	
	// push notifications
	function pushNotification($data){
		
		$url = $this->config->item('pushNotification');
		/*$data['action'] = 'register';
		$data['vDevicename'] = 'Android';
		$data['vType']		= 'Android';
		$data['vDeviceid'] = '373b268d459d8ccd123';
		$data['deviceToken'] = 'APA91bFXZJO6WT4ZMGAEwA_abo0Up_S1higetB56ZwEq5Nye8ktw1AGeTe3282Cl_nw-EZ3_2ybXIys6mDlEv4sxY0aoo_FiQ4V5DggYP2nq8Ft4zfkN6Khf1cw69_myxcx4yA3jT60ixZu8-tlZWX_KPHtYBHEbzg';*/
		
		//url-ify the data for the POST
		$fields_string = '';
		foreach($data as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
		$fields_string = rtrim($fields_string,'&');
		//echo '<pre>';print_r( $fields_string );exit;
		//open connection
		$ch = curl_init();
		curl_setopt($curl, CURL_TIMEOUT, 0);
		//set the url, number of POST vars, POST data 
		curl_setopt($ch,CURLOPT_URL,$url);
		curl_setopt($ch,CURLOPT_POST,count($data));
		curl_setopt($ch,CURLOPT_POSTFIELDS,$fields_string);
		
		curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,10); # timeout after 10 seconds, you can increase it
		//curl_setopt($ch,CURLOPT_HEADER,false);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);  # Set curl to return the data instead of printing it to the browser.
		curl_setopt($ch,  CURLOPT_USERAGENT , "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)"); # Some server may refuse your request if you dont pass user agent
		
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		
		//execute post
		$result = curl_exec($ch);
		
		//close connection
		curl_close($ch);
		return json_decode($result,true);
	}
	
	// Time ago function in Facebook style
	function relativeDate($timestamp){
	    //type cast, current time, difference in timestamps
	    $timestamp      = (int) $timestamp;
	    $current_time   = time();
	    $diff           = $current_time - $timestamp;
	   
	    //intervals in seconds
	    $intervals      = array (
	        'year' => 31556926, 'month' => 2629744, 'week' => 604800, 'day' => 86400, 'hour' => 3600, 'minute'=> 60
	    );
	   
	    //now we just find the difference
	    if ($diff == 0)
	    {
	        return 'just now';
	    }   
	
	    if ($diff < 60)
	    {
	        return $diff == 1 ? $diff . ' second ago' : $diff . ' seconds ago';
	    }       
	
	    if ($diff >= 60 && $diff < $intervals['hour'])
	    {
	        $diff = floor($diff/$intervals['minute']);
	        return $diff == 1 ? $diff . ' minute ago' : $diff . ' minutes ago';
	    }       
	
	    if ($diff >= $intervals['hour'] && $diff < $intervals['day'])
	    {
	        $diff = floor($diff/$intervals['hour']);
	        return $diff == 1 ? $diff . ' hour ago' : $diff . ' hours ago';
	    }   
	
	    if ($diff >= $intervals['day'] && $diff < $intervals['week'])
	    {
	        $diff = floor($diff/$intervals['day']);
	        return $diff == 1 ? $diff . ' day ago' : $diff . ' days ago';
	    }   
	
	    if ($diff >= $intervals['week'] && $diff < $intervals['month'])
	    {
	    	
	        $diff = floor($diff/$intervals['week']);
	        return $diff == 1 ? $diff . ' week ago' : $diff . ' weeks ago';
	    }   
	
	    if ($diff >= $intervals['month'] && $diff < $intervals['year'])
	    {
	    	return date('Y-m-d H:i:s',$timestamp);
	    }   
	
	    if ($diff >= $intervals['year'])
	    {
	    	return date('Y-m-d H:i:s',$timestamp);
	    }
	}
	
	
	/**
	 * Function: send mail to user with new password, email and username
	 */
	function Send($data){ 
		$companyName = $this->getConfiguration('COMPANY_NAME');
		$emailTempate = $this->getEmailTemplate('ADMIN_FORGOT_PASSWORD');
		
		$headers = "MIME-Version: 1.0\r\n";
		$headers .= "Content-type: text/html; charset=iso-8859-1\r\n";
		$headers .= 'From: videoblog <support@videoblog.com>' . "\r\n".
				'Reply-To: videoblog <support@videoblog.com>'. "\r\n".
				'Return-Path: videoblog <support@videoblog.com>' . "\r\n".
				'X-Mailer: PHP/' . phpversion();
		
		
		$vName 		= $data['vName'];
		$vUsername  = $data['vUsername'];
		$vPassword  = $data['vPassword'];
		
		$bodyArr = array("#NAME#","#USERNAME#", "#PASSWORD#");
		$postArr = array($vName  ,$vUsername  , $vPassword);
		$this->body = $emailTempate['tEmailMessage'];
		$this->body = str_replace($bodyArr,$postArr, $this->body);
		
		$Subject = strtr($emailTempate['vEmailSubject'], "\r\n" , "  " );          
		$To = stripcslashes($data['vEmail']);
		$htmlMail = '	
		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
		     <html xmlns="http://www.w3.org/1999/xhtml">
		     <head>
		     <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		     <title>'.$companyName['vValue'].'</title>
		     </head>
		     
		     <body style="padding:0; margin:0; border:0;">
			  <div class="mainwrap" style="float:left; width:650px; background:#e5e9ec; padding:5px;">
			       <div class="imconpart" style="float:left; width:98%; background:#f2f5f7; border-radius:5px; border-right:1px solid #d3d9dd; border-bottom:1px solid #d3d9dd; padding:1%;">
				    <div style="background:#363F49; padding: 10px 10px 10px 10px;"><p><font size=50px; color=#497CD2>'.$companyName['vValue'].'</font></p></div>
						'.$this->body.'
				    </div>
			       </div>
			  </div>
		     </body>
		</html>';
		
		if($_SERVER['SERVER_ADDR'] == '192.168.1.41'){ // for localhost server			  
			require_once "Mail.php";
			require_once "Mail/mime.php";
			$from = $emailTempate['vFromEmail'];			   
			
			$to =$To;
			$subject = strtr($Subject, "\r\n" , "  " );
			$crlf = "\n";
			$html = "<h1> This is HTML </h1>";
			$headers = array('From' => $from,'To' => $to,'Subject' => $subject);
			$host = "smtp.gmail.com";
			$username = "demo2.testing2@gmail.com";
			$password = "demo1234";
			$mime =  new Mail_mime(array('eol' => $crlf));
			$mime->setHTMLBody($htmlMail);			
			$body = $mime->getMessageBody();			
			$headers = $mime->headers($headers);			 
			$smtp = Mail::factory("smtp",array("host" => $host,"auth" => true,"username" => $username,"password" => $password));			 
			$res = $smtp->send($to, $headers, $body);			 
		}else{
			/*$config = Array(
			    'protocol' => 'smtp',
			    'smtp_host' => 'smtp.gmail.com',
			    'smtp_port' => 465,
			    'smtp_crypto' => 'ssl',
			    'smtp_user' => 'demo2.testing2@gmail.com',
			    'smtp_pass' => 'demo1234',
			    'mailtype'  => 'html', 
			    'charset'   => 'iso-8859-1'
			);
			$this->load->library('email', $config);
			$this->email->set_newline("\r\n");
			
			$this->email->from($emailTempate['vFromEmail']);
			$this->email->to($To);  
			$this->email->subject($Subject);  
			$this->email->message($htmlMail);
			$res = $this->email->send();*/
			
			$res = mail($To,$Subject,$htmlMail,$headers);
		}
		return $res; 
	}
	
	// get Configuration by unique vName 
	function getConfiguration($vName){
		$configuration = $this->configuration_model->get_configuration($vName);
		return $configuration;
	}
	
	// get Email template by email code
	function getEmailTemplate($vEmailCode){
		$emailTemplate = $this->emailtemplate_model->get_email_template($vEmailCode);
		return $emailTemplate;
	}
	
	
}
